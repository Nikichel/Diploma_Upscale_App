import streamlit as st
from streamlit_option_menu import option_menu
import time
import os
import base64

class MainUI:
    def __init__(self, auth_manager, payment_handler, image_processor, client, cookie_manager, logger):
        self.auth_manager = auth_manager
        self.payment_handler = payment_handler
        self.image_processor = image_processor
        self.client = client
        self.cookie_manager = cookie_manager
        self.logger = logger

    def render_navigation(self):
        if st.session_state.is_authenticated:
            menu_items = ["–ì–ª–∞–≤–Ω–∞—è", "–û–ø–ª–∞—Ç–∞", "–í—ã–π—Ç–∏"]
            menu_icons = ['house', 'wallet', 'box-arrow-left']
        else:
            menu_items = ["–í–æ–π—Ç–∏", "–í–ø–µ—Ä–≤—ã–µ?"]
            menu_icons = ['box-arrow-in-right', 'person-plus']

        selected = option_menu(
            menu_title=None,
            options=menu_items,
            icons=menu_icons,
            menu_icon="cast",
            default_index=0,
            key='menu',
            orientation="horizontal",
            styles={
                "container": {"padding": "0!important", "background-color": "#fafafa"},
                "icon": {"color": "orange", "font-size": "16px"}, 
                "nav-link": {"font-size": "16px", "text-align": "center", "margin":"0px", "--hover-color": "#eee"},
                "nav-link-selected": {"background-color": "#4CAF50"},
            }
        )
        
        st.session_state.selected_page = selected
        self._handle_navigation()

    def _handle_navigation(self):
        page_handlers = {
            "–ì–ª–∞–≤–Ω–∞—è": self._handle_home,
            "–û–ø–ª–∞—Ç–∞": self._handle_pay,
            "–í–æ–π—Ç–∏": self._handle_login,
            "–í–ø–µ—Ä–≤—ã–µ?": self._handle_registration,
            "–í—ã–π—Ç–∏": self._handle_logout
        }
        
        handler = page_handlers.get(st.session_state.selected_page)
        if handler: handler()

    def _handle_home(self):
        if not self._check_auth(): return
        self._render_home_page()

    def _handle_pay(self):
        if not self._check_auth(): return
        self.payment_handler.render_payment_page()

    def _handle_login(self):
        if st.session_state.is_authenticated:
            st.session_state.selected_page = "–ì–ª–∞–≤–Ω–∞—è"
            return
        self._render_login_page()

    def _handle_registration(self):
        if st.session_state.is_authenticated:
            st.session_state.selected_page = "–ì–ª–∞–≤–Ω–∞—è"
            st.rerun()
            return
        self._render_registration_page()

    def _handle_logout(self):
        self.auth_manager.clear_auth()
        st.success("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
        time.sleep(1)
        st.session_state.selected_page = "–í–æ–π—Ç–∏"
        st.rerun()

    def _check_auth(self):
        if st.session_state.is_authenticated: return True
        st.warning("‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
        st.session_state.selected_page = "–í–æ–π—Ç–∏"
        st.rerun()
        return False
    
    def _render_login_page(self):
        st.title("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É üîê")
        st.write("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")

        with st.form("login_form"):
            username = st.text_input("Email", placeholder="–í–≤–µ–¥–∏—Ç–µ email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            submitted = st.form_submit_button("–í–æ–π—Ç–∏")
            
            if submitted:
                result = self.auth_manager.login(username, password)
                self.logger.info(result)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if isinstance(result, dict) and "detail" in result:
                    st.error(result["detail"])
                elif result:  # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç True (—É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥)
                    st.success("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! üéâ")
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

    def _render_registration_page(self):
        st.title("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üìù")
        st.write("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        
        with st.form("registration_form"):
            email = st.text_input("Email", placeholder="–í–≤–µ–¥–∏—Ç–µ email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
            submitted = st.form_submit_button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            
            if submitted:
                result = self.auth_manager.register(email, password)
                if "detail" in result:
                    st.error(result["detail"])
                else:
                    st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üéâ")

    def _render_home_page(self):
        self._render_payment_status()

        st.markdown("""
            <div class="hero-section">
                <h1 class="main-title">ResUp</h1>
                <div class="subtitle">–û—Ç –ø–∏–∫—Å–µ–ª–µ–π –∫ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É</div>
            </div>
        """, unsafe_allow_html=True)
        
        col_params = st.columns(2)
        with col_params[0]:
            st.session_state.scale_factor = st.radio(
                "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è",
                options=[2, 4, 8],
                index=1,
                horizontal=True
            )
        with col_params[1]:
            st.session_state.use_decoration = st.checkbox(
                "–£–ª—É—á—à–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ (–¥–æ–ø. 5 –∫—Ä–µ–¥–∏—Ç–æ–≤)",
                value=False
            )
        
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["png", "jpg", "jpeg"])
        
        if uploaded_file is not None:
            self.image_processor.handle_image_upload(uploaded_file)

    def _render_payment_status(self):
        query_params = st.query_params
        if "success" in query_params:
            self._handle_successful_payment()
        elif "canceled" in query_params:
            self._handle_canceled_payment()

    def _handle_successful_payment(self):
        st.success("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
        product_id = self.cookie_manager.get_cookie("product_id")
        session_id = self.cookie_manager.get_cookie("session_id")

        result = self.client.payment_success(
            session_id=session_id,
            product_id=product_id,
            token=st.session_state.access_token
        )
        self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–ª–∞—Ç—ã: {result}")
        if result:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            st.session_state.user_balance = result["new_balance"]
            self.cookie_manager.set_cookie("user_balance", result["new_balance"], max_age=31556925)
            self.logger.info(f"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ë–∞–ª–∞–Ω—Å: {result['new_balance']}")

    def _handle_canceled_payment(self):
        st.warning("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")